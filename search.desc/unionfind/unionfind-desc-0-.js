searchState.loadedDescShard("unionfind", 0, "Unionfind\nTrait that has to be implemented on types that want to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTwo unioned elements were already unioned in the past\nTwo unioned elements were previously not unioned\nA union find data structure. Note that this implementation …\nWhen a union is made, there is a possibility that the two …\nFind an element in the union find. Performs no path …\nFind an element in the union find. Performs no path …\nFind an element in the union find. Performs path …\nFind an element in the union find. Performs path …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new union find, allowing you to specify all …\nunion two elements in the union find\nUnion two elements in the union find. Try to add the …\nunion two elements in the union find by rank\nUnion two elements in the union find by rank. Try to add …\nRepresents a <code>GrowableMapping</code> to which items can be …\nA mapping is functionally equivalent to a hashmap. The …\nA mapping used to map elements of type <code>T</code> to parent …\nA mapping used to relate elements to ranks, where ranks …\nSimilar to <code>set</code>, but adds a key to a mapping. Adding may …\nAdd an item mapped to itself.\nReturns true if the mapping contains a certain element\nReturns an empty mapping, which can be grown\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngets an element from the mapping. Returns none if the key …\nshould identity map every item in items\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the mapping is empty\nGets the number of items currently in the mapping.\nSet a key to a certain value. The key must be present in …\nTries to set the value of the element if the element is …\nshould create a map with every key mapped to zero")