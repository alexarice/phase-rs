searchState.loadedDescShard("faer", 1, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsolves the equation $L x = \\text{rhs}$ and stores the …\nsolves the equation $L^\\top x = \\text{rhs}$ and stores the …\nreturns the length of the slice that can be used to …\nreturns the number of supernodes in the cholesky factor\nreturns the number of columns of the cholesky factor\ncreates a new cholesky $LL^H$ factor from the symbolic …\ncreates new cholesky $LDL^H$ factors from the symbolic …\ncreates a new cholesky intranodal $LBL^\\top$ factor from …\nreturns the number of rows of the cholesky factor\nreturns the pattern of the row indices in the supernode, …\nreturns the pattern of the row indices in the supernode, …\nreturns the pivoting permutation\nreturns the row indices of the cholesky factor\nsolves the system $L B L^H x = \\text{rhs}$, implicitly …\nreturns the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nreturns the starting index of the supernode\nreturns the starting index of the supernode\nreturns the <code>s</code>’th supernode\nreturns the <code>s</code>’th supernode\nreturns the <code>s</code>’th supernode\nreturns the symbolic structure of the <code>s</code>’th supernode\nreturns a slice of length <code>self.n_supernodes()</code> containing …\nreturns a slice of length <code>self.n_supernodes()</code> containing …\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreturns a view over the numerical values of the supernode\nreturns the numerical values of the l factor\nreturns the numerical values of the l factor\nreturns the numerical values of the l factor\ntuning parameters for the amd implementation\ndo aggressive absorption\n“dense” if degree &gt; dense_col * sqrt(min(nrows, ncols))\n“dense” if degree &gt; dense_row * sqrt(ncols)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncomputes the approximate minimum degree ordering for …\ncomputes the size and alignment of required workspace for …\nsparse $LU$ factorization wrapper\ntuning parameters for the $LU$ symbolic factorization\nstructure that contains the numerical values and row …\nsimplicial structure\nsupernodal structure\nthe symbolic structure of a sparse $LU$ decomposition\nthe inner factorization used for the symbolic $LU$, either …\nreturns the fill-reducing column permutation that was …\nreturns the fill reducing column permutation\nparameters for the fill reducing column permutation\ncomputes a numerical $LU$ factorization of $A$\ncomputes the size and alignment of the workspace required …\ncomputes the symbolic $LU$ factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the number of columns of $A$\ncreates a new $LU$ of a $0\\times 0$ matrix\ncreates $LU$ factors from their components\nreturns the number of rows of $A$\nreturns the row pivoting permutation\nsimplicial factorization module\ncomputes the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ and stores the …\ncomputes the size and alignment of the workspace required …\nsolves the equation $A^\\top x = \\text{rhs}$ and stores the …\nsupernodal factorization module\nthreshold for selecting the supernodal factorization\nsupernodal factorization parameters\nreturns the symbolic structure of the $LU$ factorization\nnumber of columns of $A$\nnumber of rows of $A$\n$LU$ factor structure containing the symbolic and …\ncomputes the numeric values of the $LU$ factors of the …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nreturns the $L$ factor of the $LU$ factorization. the row …\nreturns the number of columns of $A$\ncreates a new simplicial $LU$ of a $0 \\times 0$ matrix\nreturns the number of rows of $A$\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A^\\top x = \\text{rhs}$ and stores the …\nreturns the $U$ factor of the $LU$ factorization. the row …\n$LU$ factor structure containing the symbolic and …\n$LU$ factor structure containing the symbolic structure\ncomputes the numeric values of the $LU$ factors of the …\ncomputes the size and alignment of the workspace required …\ncomputes the symbolic structure of the $LU$ factors of the …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the number of supernodes\nreturns the number of columns of $A$\ncreates a new supernodal $LU$ of a $0 \\times 0$ matrix\nreturns the number of rows of $A$\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A^\\top x = \\text{rhs}$ and stores the …\ninfo about the matrix multiplication operation to help …\nmultiplies a dense matrix <code>lhs</code> by a sparse matrix <code>rhs</code>, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmultiplies a sparse matrix <code>lhs</code> by a dense matrix <code>rhs</code>, and …\nperforms a numeric matrix multiplication of a sparse …\nperforms a numeric matrix multiplication of a sparse …\ncomputes the size and alignment of the workspace required …\nperforms a symbolic matrix multiplication of a sparse …\nsparse $QR$ factorization wrapper\ntuning parameters for the $QR$ symbolic factorization\nsimplicial structure\nsupernodal structure\nthe symbolic structure of a sparse $QR$ decomposition\nthe inner factorization used for the symbolic $QR$, either …\ncomputes the column elimination tree of $A$, which is the …\ncomputes the size and alignment of the workspace required …\nreturns the fill-reducing column permutation that was …\nparameters for the fill reducing column permutation\ncomputes the size and alignment of the workspace required …\ncomputes the column counts of the cholesky factor of …\ncomputes a numerical $QR$ factorization of $A$\ncomputes the required workspace size and alignment for a …\ncomputes the symbolic $QR$ factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice needed to store the …\nreturns the length of the slice needed to store the …\nnumber of columns of $A$\ncreates a $QR$ decomposition reference from its symbolic …\nnumber of rows of $A$\ncomputes a postordering of the elimination tree of size <code>n</code>\ncomputes the size and alignment of the workspace required …\nsimplicial factorization module\nreturns the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ in the sense of …\nsupernodal factorization module\nthreshold for selecting the supernodal factorization\nsupernodal factorization parameters\nreturns the symbolic structure of the $QR$ factorization.\nreturns the factor $R$\nreturns the numerical values of the factor $R$ of the $QR$ …\n$QR$ factors containing both the symbolic and numeric …\nsymbolic structure of the $QR$ decomposition\nApplies $Q^{\\top}$ to the input matrix <code>rhs</code>, implicitly …\ncomputes the size and alignment of the workspace required …\ncomputes the numerical $QR$ factorization of $A$.\ncomputes the symbolic $QR$ factorization of a matrix $A$, …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the householder coefficients $H$ in the columns of …\nreturns the numerical values of the householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice that can be used to …\nreturns the length of the slice that can be used to …\nreturns the number of columns of the matrix $A$\ncreates $QR$ factors from their components\nreturns the number of rows of the matrix $A$\nsolves the equation $A x = \\text{rhs}$ in the sense of …\nreturns the symbolic structure of the $QR$ factorization.\nreturns the numerical values of the $t$ factors of the …\nreturns the symbolic structure of $R^H$\nreturns the numerical values of the factor $R$ of the $QR$ …\n$QR$ factors containing both the symbolic and numeric …\nsymbolic structure of the householder reflections that …\nsymbolic structure of the $QR$ decomposition,\nApplies $Q^{\\top}$ to the rhs in place, implicitly …\nreturns the column pointers for the row indices of the …\nreturns the column pointers for the numerical values of …\nreturns the column pointers for the numerical values of …\ncomputes the numerical $QR$ factorization of $A$\ncomputes the size and alignment of the workspace required …\ncomputes the symbolic $QR$ factorization of a matrix $A$, …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the symbolic structure of the householder and $t$ …\nreturns the numerical values of the householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice that can be used to …\nreturns the length of the slice that can be used to …\nreturns the length of the slice that can be used to …\nreturns the number of supernodes in the symbolic $QR$\ncreates $QR$ factors from their components\nreturns the number of rows of the householder factors\ncomputes the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ in the sense of …\nreturns the symbolic structure of the $QR$ factorization\nreturns the numerical values of the $t$ factors of the …\nsparse $LL^\\top$ factorization\nsparse $QR$ factorization\nsparse $QR$ factorization\nreference-counted sparse symbolic $LL^\\top$ factorization\nreference-counted sparse symbolic $LU$ factorization\nreference-counted sparse symbolic $QR$ factorization\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the symbolic $LL^\\top$ factorization of the input …\nreturns the symbolic $QR$ factorization of the input matrix\nreturns the symbolic $LU$ factorization of the input matrix\nreturns the $LL^\\top$ factorization of the input matrix …\nreturns the $QR$ factorization of the input matrix with …\nreturns the $LU$ factorization of the input matrix with …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nreturns the sum of <code>lhs</code> and <code>rhs</code>.\ncomputes the sum of <code>dst</code> and <code>src</code> and stores the result in …\ncomputes the sum of <code>lhs</code> and <code>rhs</code>, storing the result in <code>dst</code> …\nreturns the resulting matrix obtained by applying <code>f</code> to the …\nreturns the resulting matrix obtained by applying <code>f</code> to the …\nreturns the difference of <code>lhs</code> and <code>rhs</code>.\ncomputes the difference of <code>dst</code> and <code>src</code> and stores the …\ncomputes the difference of <code>lhs</code> and <code>rhs</code>, storing the result …\nreturns the resulting matrix obtained by applying <code>f</code> to the …\nreturns the sparsity pattern containing the union of those …\ncomputes the adjoint of the matrix $A$ and returns a view …\ncomputes the self-adjoint permutation $P A P^\\top$ of the …\ncomputes the workspace size and alignment required to …\ncomputes the self-adjoint permutation $P A P^\\top$ of the …\ncomputes the workspace size and alignment required to …\ncomputes the self-adjoint permutation $P A P^\\top$ of the …\nsorts and deduplicates <code>row_indices</code> and <code>values</code> …\nsorts <code>row_indices</code> and <code>values</code> simultaneously so that …\ncomputes the transpose of the matrix $A$ and returns a …\ncomputes the transpose of the matrix $A$ and returns a …\ncomputes the workspace size and alignment required to …\ncomputes the workspace size and alignment required to …\nNaNs are skipped, and they’re not included in the total …\nSpecifies how missing values should be handled in mean and …\nNaNs are passed as-is to arithmetic operators.\ncomputes the mean of the columns of <code>mat</code> and stores the …\ncomputes the variance of the columns of <code>mat</code> and stores the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomputes the mean of the rows of <code>mat</code> and stores the result …\ncomputes the variance of the rows of <code>mat</code> and stores the …\nA generic random value distribution for complex numbers.\nA marker trait used to indicate that an <code>RngCore</code> or …\nTypes (distributions) that can be used to create a random …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing random mutation and …\nA generic random value distribution, implemented for many …\nSamples floating-point numbers according to the normal …\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a distribution of values of ‘S’ by mapping the …\nCreates a complex distribution from independent …\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerates a random value using the thread-local random …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nRetrieve the lazily-initialized thread-local random number …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\napproximate comparators for testing purposes\ncompile-time bound-checked indexing types\nsimd helper utilities based on lifetime-bound indices\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\narray of length equal to the value tied to <code>&#39;n</code>.\nlifetime branded length\nlifetime branded index.\nlifetime branded partition index.\nindex equal to zero ro one\n<code>i</code> value smaller than the size corresponding to the …\nindex equal to zero ro one, or a sentinel value\ndimension equal to one\nsplits a range into two segments.\nzero index\nindex equal to zero\nreturns <code>start</code> advanced by <code>len</code> units, saturated to <code>self</code>\nreturns the unconstrained slice.\nreturns the unconstrained slice.\nconvert a constrained slice to an unconstrained one.\ncheck that the index is bounded by <code>self</code>, or panic …\nreturns the index, bounded inclusively by the value tied …\nreturns the midpoint of the partition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns an index value.\nreturns a constrained array after checking that its length …\nreturns a constrained array after checking that its length …\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassume that the values of <code>slice</code> are all bounded by the …\nassume that the values of <code>slice</code> are all bounded by the …\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassume that the values of <code>slice</code> are all bounded by the …\nassume that the values of <code>slice</code> are all bounded by the …\nsize of the first half.\npartitions <code>self</code> into two segments.\ncheck that the index is bounded by <code>self</code>, or panic …\nreturns the index if available, or <code>none</code> otherwise.\ncheck that the index is bounded by <code>self</code>, or panic …\nreturns an iterator over the indices between <code>0</code> and <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of <code>self</code>.\nreturns the midpoint of the partition.\ncreate new branded value with a unique brand.\ncreate new branded value with the same brand as <code>Dim</code>.\ncreate new branded value with the same brand as <code>Dim</code>.\nreturns a constrained index value if <code>idx</code> is nonnegative, …\ncreate new branded value with an arbitrary brand.\ncreate new branded value with an arbitrary brand.\ncreate new branded value with an arbitrary brand.\nreturns a constrained index value if <code>idx</code> is nonnegative, …\ncreate new branded value with the same brand as <code>Dim</code>.\ncreate new branded value with the same brand as <code>Dim</code>.\nreturns a constrained index value if <code>idx</code> is nonnegative, …\nreturns the next index, bounded inclusively by the value …\nreturns a <code>none</code> value.\nreturns an iterator over the indices between <code>0</code> and <code>self</code>.\npartitions <code>self</code> into two segments as specifiedd by the …\nreturns an iterator over the indices between <code>self</code> and <code>to</code>.\nsign extend the value.\nsize of the second half.\nreturns an iterator over the indices between <code>self</code> and <code>to</code>.\nreturns the index, bounded inclusively by the value tied …\ntruncate <code>self</code> to a smaller type <code>i</code>.\ncheck that the index is bounded by <code>self</code>, or return <code>none</code> …\nreturns the unconstrained value.\nreturns the unconstrained value.\nreturns the unconstrained value.\nreturns the inner value.\ncreate new branded value with the value <code>dim</code>.\nzero-extends the internal value into a <code>usize</code>.\nzero-extends the internal value into a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")