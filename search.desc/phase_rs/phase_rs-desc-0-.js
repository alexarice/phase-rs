searchState.loadedDescShard("phase_rs", 0, "The repository contains an implementation of the …\nThe combinator version of the language.\nHelpers for parsing and pretty printing.\nA syntax of commands and their parsing.\nSimple term evaluation, expanding and simplifying terms.\nEvaluation to circuit normal form, for extracting quantum …\nParsing functions for raw syntax.\nSyntax definitions for raw, typed, normal, and …\nFunctions and datastructures for type checking\nContains functions for converting normal-form syntax to …\nThe Command structure: a runnable program.\nTypecheck a command, building an <code>Env</code> with gate definitions.\nReturns the argument unchanged.\nList of gates to define, with the name to bind them to.\nCalls <code>U::from(self)</code>.\nFinal term to evaluate.\nTrait for objects that can built with compositions, …\nBuild an object from an atom.\nBuild a composition object from a sequence of subobjects …\nBuild a tensor product from a sequence of subobjects.\nParse a command\nParse a comment\nParser for phases.\nParser for terms.\nSpecifies the phase by an float, which should equal the …\ni phase, equivalent to <code>Angle(0.5)</code>\nHolds the value of a ket pattern.\n|-&gt; pattern\n-i phase, equivalent to <code>Angle(1.5)</code>\n-1 phase, equivalent to <code>Angle(1.0)</code>\n|1&gt; pattern\nRepresents a (global) phase operation.\n|+&gt; pattern\n|0&gt; pattern\nDefinitions of circuit-normal syntax.\nReturns the complement of the state. <code>state</code> and …\nReturns the angle specified by this phase, divided by pi. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Phase</code> from a float representing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormal-form syntax definitions\nRaw syntax definitions\nReturns the character needed to print this ket state.\nReturns the vector this <code>KetState</code> represents.\nTyped syntax definitions\nCircuit-normal terms.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a <code>TermT</code> which is the “quotation” of this …\nAn “atomic” term\n“Atomic” terms. Terms which are not compositions or …\nA composition “t_1 ; … ; t_n” with given type\nA composition “p_1 . … . p_n” with given type\nAn “if let” statement with given pattern, body term, …\nA single ket state “|x&gt;”\nA normal-form patterns\nA (global) phase operator, e.g. “-1” or “ph(0.1pi)”\nA tensor “t_1 x … x t_n”\nA tensor “p_1 x … x p_n”\nA normal-form term\nAn “atomic” term. Compound terms are evaluated to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>TermT</code> which is the “quotation” of this …\nReturn a <code>PatternT</code> which is the “quotation” of this …\nSimplifies compositions, tensors, and identities in the …\nSimplifies compositions, tensors, and identities in the …\nConvert a normal-form pattern of type qm &lt; qn to an m x n …\nConvert a normal-form term of type qn &lt;-&gt; qn to an n x n …\nConvert a normal-form atom of type qn &lt;-&gt; qn to an n x n …\nRaw syntax atom with text span. Represents a term other …\nRaw syntax atom without text span. Represents a term other …\nA term enclosed in parentheses\nA pattern enclosed in parentheses\nTop level symbol, a named gate\nAn identity term “id(n)”\nAn “if let” statement, “if let pattern then inner”\nInverse of a term “t ^ -1”\nA sequence of ket states “|xyz&gt;”, equivalent to “|x&gt; …\nRaw syntax pattern atom with text span. Represents a …\nRaw syntax pattern atom without text span. Represents a …\nRaw syntax tensored pattern with text span. Represents a …\nRaw syntax tensored pattern without text span. Represents …\nRaw syntax pattern with text span. Represents a list of …\nRaw syntax pattern without text span. Represents a list of …\nA (global) phase operator, e.g. “-1” or “ph(0.1pi)”\nSquare root of a term “sqrt(t)”\nRaw syntax tensored term with text span. Represents a list …\nRaw syntax tensored term without text span. Represents a …\nRaw syntax term with text span. Represents a list of …\nRaw syntax term without text span. Represents a list of …\nA unitary pattern\nTypecheck a raw term in given environment If <code>check_sqrt</code> is …\nTypecheck a raw pattern in given environment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrapped data\nWrapped data\nWrapped data\nWrapped data\nWrapped data\nWrapped data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nText span\nText span\nText span\nText span\nText span\nText span\nBody of the “if let”\nPattern to match on in “if let”\nA non-empty composition “t_1 ; … ; t_n”\nA non-empty composition “p_1 . … . p_n”\nTop level symbol, a named gate\nAn identity “id(n)”\nAn “if let” statement, “if let pattern then inner”\nInverse of a term “t ^ -1”\nA sequence of ket states “|xyz&gt;”, equivalent to “|x&gt; …\nSyntax of typed patterns\nA pattern type “qn &lt; qm”\nA (global) phase operator, e.g. “-1” or “ph(0.1pi)”\nSquare root of a term “sqrt(t)”\nA tensor “t_1 x … x t_n”\nA tensor “p_1 x … x p_n”\nSyntax of typed terms\nA unitary type “qn &lt;-&gt; qn”\nA unitary pattern\nEvaluate a term to a given <code>Buildable</code> type, expanding top …\nReturns a <code>TermC</code> representing the “circuit-normal-form” …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the type of this term\nReturns the type of this pattern\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a unitary type qn &lt;-&gt; qn to pattern type qn &lt; qn\nConvert to a raw term.\nConvert to a raw pattern.\nDefinition of symbol\nBody of the “if let”\nName of symbol/gate\nPattern to match on in “if let”\nTyping enviroment, holding definitions of top level …\nError for mismatching type between a term and pattern in …\nError for mismatching type between composed patterns.\nError for when a sqrt operation is applied to a term with …\nErrors that can occur during typechecking.\nError for mismatching type between terms in a composition.\nError for an unknown top-level symbol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unknown symbol encountered\nPattern\nPattern 1\nPattern 2\nType of pattern\nSpan of symbol\nSpan of sqrt term causing error\nBody term\nTerm 1\nTerm 2\nTerm which contains compositions\nType of body term\nType of term 1\nType of pattern 1\nType of term 2\nType of pattern 2\nWraps data of type <code>T</code> in a span of type <code>S</code>, locating it in …\nTrait for types which can be pretty-printed\nTypecheck a raw pattern in given environment\nTypecheck a raw term in given environment If <code>check_sqrt</code> is …\nReturns the argument unchanged.\nWrapped data\nCalls <code>U::from(self)</code>.\nParse a <code>Spanned&lt;Range&lt;usize&gt;, T&gt;</code> using a parser for <code>T</code>.\nText span\nProduce an <code>RcDoc</code> for pretty-printing.")